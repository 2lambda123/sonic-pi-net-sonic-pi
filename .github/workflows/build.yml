name: Build

on:
  push:
    branches: [ dev, main, workflow_dispatch, features/new-layout-and-api ]
  pull_request:
    branches: [ dev, main, workflow_dispatch, features/new-layout-and-api ]

jobs:
  build:
    name: "${{matrix.title}} (${{matrix.cc}}, ${{matrix.arch}}, ${{matrix.build_type}})"
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
           - { title: "Linux", os: "ubuntu-latest", cc: "clang", arch: "x64", build_type: "Release" }
           - { title: "Linux", os: "ubuntu-latest", cc: "clang", arch: "x64", build_type: "Debug" }
           - { title: "Linux", os: "ubuntu-latest", cc: "gcc", arch: "x64", build_type: "Release" }
           - { title: "Linux", os: "ubuntu-latest", cc: "gcc", arch: "x64", build_type: "Debug" }
           - { title: "Windows", os: "windows-latest", cc: "vs2019", arch: "x64", build_type: "Release" }
           - { title: "Windows", os: "windows-latest", cc: "vs2019", arch: "x64", build_type: "Debug" }
           - { title: "Mac", os: "macos-latest", cc: "clang", arch: "x64", build_type: "Release" }
           - { title: "Mac", os: "macos-latest", cc: "clang", arch: "x64", build_type: "Debug" }

    steps:

    # Get the code
    - uses: actions/checkout@v2

    # Install Ruby (and Bundler)
    - name: Install Ruby
      uses: ruby/setup-ruby@v1
      id: ruby-inst
      with:
        ruby-version: 2.7

    # For windows we build a symlink in the bash shell because the windows method does not seem to work.
    - name: [Windows]: Add Ruby SymLink
      working-directory: ${{github.workspace}}/app/server/native
      run: |
        ln -s ${{steps.ruby-inst.outputs.ruby-prefix}} ruby
      if: matrix.os == 'windows-latest'

      # Keep a cached copy of the Qt build so we can speed up subsequent builds
    - name: Cache Qt
      id: cache-qt2
      uses: actions/cache@v1
      with:
        path: ../Qt2
        key: ${{ runner.os }}-QtCache2

      # Get Qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt2.outputs.cache-hit }}

      # Latest Erlang on Ubuntu
    - name: [Linux]: Install Erlang
      uses: gleam-lang/setup-erlang@v1.1.2
      with:
        otp-version: 23.2.1
      if: matrix.os == 'ubuntu-latest'

    - name: [Mac]: Install Erlang
      continue-on-error: true
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        brew update
        brew install erlang
      if: matrix.os == 'macos-latest'

    - name: [Linux]: Prebuild
      working-directory: ${{github.workspace}}/app
      env:
        CC: ${{ matrix.cc }}
        QT_INSTALL_LOCATION: ${{env.Qt5_DIR}}
      run: |
        sudo apt-get install -y libssl-dev ruby-dev supercollider-server sc3-plugins-server alsa-utils jackd2 libjack-jackd2-dev libjack-jackd2-0 libasound2-dev librtmidi-dev pulseaudio-module-jack
        ./linux-prebuild.sh --build-aubio
      if: matrix.os == 'ubuntu-latest'

    - name: [Mac]: Prebuild
      working-directory: ${{github.workspace}}/app
      env:
        CC: ${{ matrix.cc }}
        QT_INSTALL_LOCATION: ${{env.Qt5_DIR}}
      run: |
        ./mac-prebuild.sh
      if: matrix.os == 'macos-latest'

    # Note that we 'hide' the msys folders on windows to stop conflicts when building
    # Flac
    - name: [Windows]: Prebuild
      working-directory: ${{github.workspace}}/app
      shell: cmd
      env:
        CC: ${{ matrix.cc }}
        QT_INSTALL_LOCATION: ${{env.Qt5_DIR}}
      run: |
        mv c:/msys64 c:/__msys64
        win-prebuild.bat
      if: matrix.os == 'windows-latest'

    - name: Ruby Server Tests
      working-directory: ${{github.workspace}}/app/server/ruby
      run: rake test

      #- name: Setup tmate session
      # uses: mxschmitt/action-tmate@v3

    - name: [Linux]: Config
      working-directory: ${{github.workspace}}/app
      env:
        CC: ${{ matrix.cc }}
        QT_INSTALL_LOCATION: ${{env.Qt5_DIR}}
      run: |
        ./linux-config.sh --config ${{ matrix.build_type }}
      if: matrix.os == 'ubuntu-latest'

    - name: [Mac]: Config
      working-directory: ${{github.workspace}}/app
      env:
        CC: ${{ matrix.cc }}
        QT_INSTALL_LOCATION: ${{env.Qt5_DIR}}
      run: |
        ./mac-config.sh --config ${{ matrix.build_type }}
      if: matrix.os == 'macos-latest'

    - name: [Windows]: Config
      working-directory: ${{github.workspace}}/app
      shell: cmd
      env:
        CC: ${{ matrix.cc }}
        QT_INSTALL_LOCATION: ${{env.Qt5_DIR}}
      run: |
        win-config.bat
      if: matrix.os == 'windows-latest'

    - name: Build Qt GUI
      working-directory: ${{github.workspace}}/app/build
      run: cmake --build . --config ${{ matrix.build_type }}
      # The config option here only applies to Windows (since gcc/clang require
      # setting the config when generating the build system), whilst VC2019 
      # selects it at build time.
