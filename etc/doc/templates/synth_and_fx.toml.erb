<%=
t_(<<~TEXT.chomp
# This is a data file that contains information describing the text that is
# displayed on pages in the Synths section of Sonic Pi's help panel.

# A unique identifier for this synth or fx, the word that is typed in the code
# to use it.
# (For example: :pretty_bell).
TEXT
)
%>
[<%= key %>]

<%=
t_(<<~TEXT.chomp
# A word or short phrase that is used as a label for the synth or fx.
# (For example: Pretty Bell).
TEXT
)
%>
name = "<%= t_(item.name) %>"

<%= t_('# A basic code example of how to use the synth or fx.') %>
usage = '''
<%=
if collection[:klass] == SonicPi::Synths::SynthInfo
  "use_synth :#{key}"
elsif collection[:klass] == SonicPi::Synths::FXInfo
  fx_string = <<~TEXT.chomp
with_fx :#{key} do
  play 50
end
TEXT
end
%>
'''

<%= t_('# The detailed description of the synth or fx.') %>
doc = '''
<%= t_(item.doc) %>
'''

<%=
t_(<<~TEXT.chomp
# The label describing the version of Sonic Pi in which this synth or fx first
# appeared.
TEXT
)
%>
[<%= key %>.introduced]
label = "<%= t_("Introduced in #{item.introduced.to_s}") %>"

<%=
t_(<<~TEXT.chomp
# The options are the opts of this synth or fx.
# In the documentation, we currently display two tables of opts:
# - one listing the name of each opt and its default value for easy reference
# - a second, more detailed table labelled 'Options', containing:
#   - the name of each opt
#   - a detailed description of it
#   - its default value
#   - (if the opt has constraints (limits or a specific range of permitted
#     values, etc)): the constraints of the opt
#   - a label describing whether this opt can be modulated (altered) while the
#     synth or fx is running
#   - (if the opt is slidable): a label indicating that the opt is slidable
TEXT
)
%>
[<%= key %>.options]
label = "<%= t_('Options') %>"
<% item.arg_info.each do |name, attributes| %>
[[<%= key %>.options.list]]
name = "<%= name %>:"
doc = "<%= t_(attributes[:doc] || 'write me') %>"
default_value = "<%= attributes[:default] %>"
<% unless attributes[:constraints].empty? %>
constraints = '''
<%= t_(attributes[:constraints].join(', ').capitalize) %>
'''
<% end %>
modulatable = '''
<%=
t_(
  if attributes[:modulatable]
    'May be changed whilst playing'
  else
    'Can not be changed once set'
  end
)
%>
'''
<% end %>
<%=
if item.arg_info.any? { |name, arg| arg[:slidable] }
  ERB.new(File.read(slides_template_path), nil, '-', eoutvar: '_slide01').result(binding)
end
%>
